import { useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import Plotly from 'plotly.js';

export function useChartExport() {
  const { toast } = useToast();

  const exportAsPNG = useCallback(
    async (filename: string = 'chart'): Promise<void> => {
      try {
        const plotElement = document.querySelector('.js-plotly-plot') as any;
        if (!plotElement) {
          throw new Error('Chart not found. Please ensure a chart is visible.');
        }

        const imageData = await Plotly.toImage(plotElement, {
          format: 'png',
          width: 1200,
          height: 800,
          scale: 2, // Higher quality
        });

        // Create download link
        const link = document.createElement('a');
        link.download = `${filename}.png`;
        link.href = imageData;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        toast({
          title: "Chart exported",
          description: "PNG image downloaded successfully",
        });
      } catch (error) {
        console.error('PNG export error:', error);
        toast({
          title: "Export failed",
          description: error instanceof Error ? error.message : "Could not export chart as PNG",
          variant: "destructive",
        });
      }
    },
    [toast]
  );

  const exportAsHTML = useCallback(
    async (filename: string = 'chart', chartTitle?: string): Promise<void> => {
      try {
        const plotElement = document.querySelector('.js-plotly-plot') as any;
        if (!plotElement) {
          throw new Error('Chart not found. Please ensure a chart is visible.');
        }

        const plotData = plotElement.data;
        const plotLayout = plotElement.layout;
        const plotConfig = plotElement.config || {};

        const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${chartTitle || 'Interactive Chart'}</title>
    <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f8fafc;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        .header {
            padding: 20px;
            border-bottom: 1px solid #e2e8f0;
            background-color: #fff;
        }
        .title {
            margin: 0;
            font-size: 24px;
            font-weight: 600;
            color: #1e293b;
        }
        .subtitle {
            margin: 5px 0 0 0;
            color: #64748b;
            font-size: 14px;
        }
        #chart-container {
            width: 100%;
            height: 600px;
            padding: 20px;
        }
        .footer {
            padding: 20px;
            border-top: 1px solid #e2e8f0;
            background-color: #f8fafc;
            text-align: center;
            color: #64748b;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">${chartTitle || 'Interactive Chart'}</h1>
            <p class="subtitle">Generated by DataVision AI • ${new Date().toLocaleDateString()}</p>
        </div>
        <div id="chart-container"></div>
        <div class="footer">
            Interactive chart • Hover for details • Click legend to toggle series
        </div>
    </div>
    <script>
        Plotly.newPlot('chart-container', ${JSON.stringify(plotData)}, ${JSON.stringify(plotLayout)}, {
            responsive: true,
            displayModeBar: true,
            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d'],
            ...${JSON.stringify(plotConfig)}
        });
    </script>
</body>
</html>`;

        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.download = `${filename}.html`;
        link.href = url;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        toast({
          title: "Interactive chart exported",
          description: "HTML file downloaded successfully",
        });
      } catch (error) {
        console.error('HTML export error:', error);
        toast({
          title: "Export failed",
          description: error instanceof Error ? error.message : "Could not export chart as HTML",
          variant: "destructive",
        });
      }
    },
    [toast]
  );

  const exportAsSVG = useCallback(
    async (filename: string = 'chart'): Promise<void> => {
      try {
        const plotElement = document.querySelector('.js-plotly-plot') as any;
        if (!plotElement) {
          throw new Error('Chart not found. Please ensure a chart is visible.');
        }

        const imageData = await Plotly.toImage(plotElement, {
          format: 'svg',
          width: 1200,
          height: 800,
        });

        const link = document.createElement('a');
        link.download = `${filename}.svg`;
        link.href = imageData;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        toast({
          title: "Chart exported",
          description: "SVG image downloaded successfully",
        });
      } catch (error) {
        console.error('SVG export error:', error);
        toast({
          title: "Export failed",
          description: error instanceof Error ? error.message : "Could not export chart as SVG",
          variant: "destructive",
        });
      }
    },
    [toast]
  );

  const exportAsJSON = useCallback(
    (data: any, filename: string = 'chart-data'): void => {
      try {
        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.download = `${filename}.json`;
        link.href = url;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        toast({
          title: "Data exported",
          description: "JSON file downloaded successfully",
        });
      } catch (error) {
        console.error('JSON export error:', error);
        toast({
          title: "Export failed",
          description: "Could not export data as JSON",
          variant: "destructive",
        });
      }
    },
    [toast]
  );

  return {
    exportAsPNG,
    exportAsHTML,
    exportAsSVG,
    exportAsJSON,
  };
}